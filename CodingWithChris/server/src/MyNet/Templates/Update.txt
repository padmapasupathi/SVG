module MyNet.Update where
import MyNet.Static.Types
import MyNet.Static.FromSuperPlace
import MyNet.Static.Helpers.ForestPath as ForestPath
import MyNet.Static.Helpers.EmeraldLake as EmeraldLake
import MyNet.Static.Helpers.Volcano as Volcano

import MyNet.Static.Helpers.ForestPathPlayer as ForestPathPlayer
import MyNet.Static.Helpers.EmeraldLakePlayer as EmeraldLakePlayer
import MyNet.Static.Helpers.VolcanoPlayer as VolcanoPlayer

import Static.List
import Utils.Utils
import Static.ServerTypes
import Static.Cmd (Cmd(..))
import qualified Static.Cmd as Cmd

-- function called when new client connects (do not delete)
clientConnect :: FromSuperPlace -> ClientID -> ForestPath -> (ForestPath, ForestPathPlayer)
clientConnect fsp clientID forestPath =
    error "Please fill out clientConnect function for the MyNet net."

-- functions called when a client disconnects (do not delete)
clientDisconnectFromEmeraldLake :: FromSuperPlace -> ClientID -> EmeraldLake -> EmeraldLakePlayer -> EmeraldLake
clientDisconnectFromEmeraldLake fsp clientID emeraldLake emeraldLakePlayer =
    error "Please fill out the clientDisconnectFromEmeraldLake function for the MyNet net."

clientDisconnectFromForestPath :: FromSuperPlace -> ClientID -> ForestPath -> ForestPathPlayer -> ForestPath
clientDisconnectFromForestPath fsp clientID forestPath forestPathPlayer =
    error "Please fill out the clientDisconnectFromForestPath function for the MyNet net."

clientDisconnectFromVolcano :: FromSuperPlace -> ClientID -> Volcano -> VolcanoPlayer -> Volcano
clientDisconnectFromVolcano fsp clientID volcano volcanoPlayer =
    error "Please fill out the clientDisconnectFromVolcano function for the MyNet net."


-- functions for each transition
updateLeaveForestPath :: FromSuperPlace -> 
    ClientID ->
    LeaveForestPath ->
    ForestPath -> 
    EmeraldLake -> 
    Volcano -> 
    List ForestPathPlayer -> 
    ( ForestPath,
      EmeraldLake,
      Volcano,
      (ClientID, ForestPathPlayer) -> LeaveForestPathfromForestPath
    )
updateLeaveForestPath fsp clientId LeaveForestPath forestPath emeraldLake volcano lstForestPath =
    let
        fromForestPath :: (ClientID, ForestPathPlayer) -> LeaveForestPathfromForestPath
        fromForestPath (pId, pforestPath) = error "Please fill in function stub."


    in
        (forestPath, emeraldLake, volcano, fromForestPath)

updateLeaveEmeraldLake :: FromSuperPlace -> 
    ClientID ->
    LeaveEmeraldLake ->
    EmeraldLake -> 
    ForestPath -> 
    List EmeraldLakePlayer -> 
    ( EmeraldLake,
      ForestPath,
      (ClientID, EmeraldLakePlayer) -> LeaveEmeraldLakefromEmeraldLake
    )
updateLeaveEmeraldLake fsp clientId LeaveEmeraldLake emeraldLake forestPath lstEmeraldLake =
    let
        fromEmeraldLake :: (ClientID, EmeraldLakePlayer) -> LeaveEmeraldLakefromEmeraldLake
        fromEmeraldLake (pId, pemeraldLake) = error "Please fill in function stub."


    in
        (emeraldLake, forestPath, fromEmeraldLake)

updateLeaveVolcano :: FromSuperPlace -> 
    ClientID ->
    LeaveVolcano ->
    Volcano -> 
    ForestPath -> 
    List VolcanoPlayer -> 
    ( Volcano,
      ForestPath,
      (ClientID, VolcanoPlayer) -> LeaveVolcanofromVolcano
    )
updateLeaveVolcano fsp clientId LeaveVolcano volcano forestPath lstVolcano =
    let
        fromVolcano :: (ClientID, VolcanoPlayer) -> LeaveVolcanofromVolcano
        fromVolcano (pId, pvolcano) = error "Please fill in function stub."


    in
        (volcano, forestPath, fromVolcano)


